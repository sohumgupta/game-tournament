// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var AIPlayer$Game = require("./AIPlayer.bs.js");
var Connect4$Game = require("./Connect4.bs.js");
var HumanPlayer$Game = require("./HumanPlayer.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Referee(MyGame) {
  return (function (Player1) {
      return (function (Player2) {
          var playGame = function (param) {
            try {
              var _s = MyGame[/* initialState */3];
              while(true) {
                var s = _s;
                console.log(Curry._1(MyGame[/* stringOfState */1], s));
                var match = Curry._1(MyGame[/* gameStatus */5], s);
                if (typeof match === "number") {
                  console.log("Draw...");
                  return /* () */0;
                } else if (match.tag) {
                  var player = match[0];
                  console.log(Curry._1(MyGame[/* stringOfPlayer */0], player) + "'s turn.");
                  var theMove = player ? Curry._1(Player2[/* nextMove */1], s) : Curry._1(Player1[/* nextMove */1], s);
                  console.log(Curry._1(MyGame[/* stringOfPlayer */0], player) + (" makes the move " + Curry._1(MyGame[/* stringOfMove */2], theMove)));
                  _s = Curry._2(MyGame[/* nextState */6], s, theMove);
                  continue ;
                } else {
                  console.log(Curry._1(MyGame[/* stringOfPlayer */0], match[0]) + " wins!");
                  return /* () */0;
                }
              };
            }
            catch (raw_exn){
              var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
              if (exn[0] === Caml_builtin_exceptions.failure) {
                console.log(exn[1]);
                return /* () */0;
              } else {
                throw exn;
              }
            }
          };
          return /* module */[
                  /* CurrentGame */MyGame,
                  /* playGame */playGame
                ];
        });
    });
}

var MyGame_000 = Connect4$Game.Connect4[3];

var MyGame_001 = Connect4$Game.Connect4[6];

var MyGame_002 = Connect4$Game.Connect4[7];

var MyGame_003 = Connect4$Game.Connect4[9];

var MyGame_004 = Connect4$Game.Connect4[10];

var MyGame_005 = Connect4$Game.Connect4[11];

var MyGame_006 = Connect4$Game.Connect4[15];

var MyGame_007 = Connect4$Game.Connect4[16];

var MyGame_008 = Connect4$Game.Connect4[17];

var MyGame = [
  MyGame_000,
  MyGame_001,
  MyGame_002,
  MyGame_003,
  MyGame_004,
  MyGame_005,
  MyGame_006,
  MyGame_007,
  MyGame_008
];

var $$let = HumanPlayer$Game.HumanPlayer([
      Connect4$Game.Connect4[3],
      Connect4$Game.Connect4[6],
      Connect4$Game.Connect4[7],
      Connect4$Game.Connect4[9],
      Connect4$Game.Connect4[10],
      Connect4$Game.Connect4[11],
      Connect4$Game.Connect4[15],
      Connect4$Game.Connect4[16],
      Connect4$Game.Connect4[17]
    ]);

var R1 = (function (Player1) {
        return (function (Player2) {
            var playGame = function (param) {
              try {
                var _s = MyGame_003;
                while(true) {
                  var s = _s;
                  console.log(Curry._1(MyGame_001, s));
                  var match = Curry._1(MyGame_005, s);
                  if (typeof match === "number") {
                    console.log("Draw...");
                    return /* () */0;
                  } else if (match.tag) {
                    var player = match[0];
                    console.log(Curry._1(MyGame_000, player) + "'s turn.");
                    var theMove = player ? Curry._1(Player2[/* nextMove */1], s) : Curry._1(Player1[/* nextMove */1], s);
                    console.log(Curry._1(MyGame_000, player) + (" makes the move " + Curry._1(MyGame_002, theMove)));
                    _s = Curry._2(MyGame_006, s, theMove);
                    continue ;
                  } else {
                    console.log(Curry._1(MyGame_000, match[0]) + " wins!");
                    return /* () */0;
                  }
                };
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn[0] === Caml_builtin_exceptions.failure) {
                  console.log(exn[1]);
                  return /* () */0;
                } else {
                  throw exn;
                }
              }
            };
            return /* module */[
                    /* CurrentGame */MyGame,
                    /* playGame */playGame
                  ];
          });
      })([
        $$let[0],
        $$let[2]
      ])(AIPlayer$Game.AIPlayer([
          Connect4$Game.Connect4[3],
          Connect4$Game.Connect4[6],
          Connect4$Game.Connect4[7],
          Connect4$Game.Connect4[9],
          Connect4$Game.Connect4[10],
          Connect4$Game.Connect4[11],
          Connect4$Game.Connect4[15],
          Connect4$Game.Connect4[16],
          Connect4$Game.Connect4[17]
        ]));

Curry._1(R1[/* playGame */1], /* () */0);

exports.Referee = Referee;
exports.R1 = R1;
/* R1 Not a pure module */
