// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function stringOfPlayer(p) {
  if (p) {
    return "Player 2";
  } else {
    return "Player 1";
  }
}

function stringOfPiece(n) {
  if (n !== 1) {
    if (n !== 2) {
      return "0";
    } else {
      return "\x1b[91m2\x1b[0m";
    }
  } else {
    return "\x1b[36m1\x1b[0m";
  }
}

function transpose(cols) {
  if (cols) {
    var match = cols[0];
    if (match) {
      if (match[1]) {
        return /* :: */[
                List.map(List.hd, cols),
                transpose(List.map(List.tl, cols))
              ];
      } else {
        return /* :: */[
                List.map(List.hd, cols),
                /* [] */0
              ];
      }
    } else {
      return Pervasives.failwith("A board cannot be 0-dimensional.");
    }
  } else {
    return Pervasives.failwith("A board cannot be empty.");
  }
}

function stringOfState(param) {
  var stringOfStateHelper = function (rows) {
    if (rows) {
      return List.fold_right((function (x, y) {
                    return stringOfPiece(x) + (" " + y);
                  }), rows[0], "") + ("\n" + stringOfStateHelper(rows[1]));
    } else {
      return "";
    }
  };
  return stringOfStateHelper(transpose(param[1]));
}

function stringOfMove(param) {
  return "Column " + String(param[0]);
}

function fill(element, length) {
  if (length <= 0) {
    return /* [] */0;
  } else {
    return /* :: */[
            element,
            fill(element, CS17SetupGame$Game.$neg(length, 1))
          ];
  }
}

var initialState_000 = /* Ongoing */Block.__(1, [/* P1 */0]);

var initialState_001 = fill(fill(0, 5), 7);

var initialState = /* State */[
  initialState_000,
  initialState_001
];

function legalMoves(s) {
  var legalColumns = function (_board, _currentCol) {
    while(true) {
      var currentCol = _currentCol;
      var board = _board;
      if (board) {
        var tl = board[1];
        if (List.hd(board[0]) === 0) {
          return /* :: */[
                  /* Move */[currentCol],
                  legalColumns(tl, CS17SetupGame$Game.$plus(currentCol, 1))
                ];
        } else {
          _currentCol = CS17SetupGame$Game.$plus(currentCol, 1);
          _board = tl;
          continue ;
        }
      } else {
        return /* [] */0;
      }
    };
  };
  var tmp = s[0];
  if (typeof tmp === "number" || !tmp.tag) {
    return /* [] */0;
  } else {
    return legalColumns(s[1], 1);
  }
}

function gameStatus(param) {
  return param[0];
}

function diagonals(b) {
  var numRows = List.length(List.hd(b));
  var diagHelper = function (board, rows) {
    var take = function (alod, n) {
      if (n !== 0) {
        if (alod) {
          return /* :: */[
                  alod[0],
                  take(alod[1], CS17SetupGame$Game.$neg(n, 1))
                ];
        } else {
          return Pervasives.failwith("Can't take from an empty list");
        }
      } else {
        return /* [] */0;
      }
    };
    var drop = function (_alod, _n) {
      while(true) {
        var n = _n;
        var alod = _alod;
        if (n !== 0) {
          if (alod) {
            _n = CS17SetupGame$Game.$neg(n, 1);
            _alod = alod[1];
            continue ;
          } else {
            return Pervasives.failwith("Can't drop from an empty list");
          }
        } else {
          return alod;
        }
      };
    };
    if (board) {
      var col = board[0];
      if (col) {
        if (board[1]) {
          var rr = diagHelper(board[1], rows);
          var topCorner = take(rr, CS17SetupGame$Game.$neg(rows, 1));
          var back = drop(rr, CS17SetupGame$Game.$neg(rows, 1));
          return Pervasives.$at(/* :: */[
                      /* :: */[
                        col[0],
                        /* [] */0
                      ],
                      List.map2((function (x, y) {
                              return /* :: */[
                                      x,
                                      y
                                    ];
                            }), col[1], topCorner)
                    ], back);
        } else {
          return List.map((function (x) {
                        return /* :: */[
                                x,
                                /* [] */0
                              ];
                      }), col);
        }
      } else {
        return Pervasives.failwith("column cannot be empty");
      }
    } else {
      return Pervasives.failwith("board is empty");
    }
  };
  return List.append(diagHelper(b, numRows), diagHelper(List.rev(b), numRows));
}

function check(_n, _set, f) {
  while(true) {
    var set = _set;
    var n = _n;
    var find = function (_set, sub, _rest) {
      while(true) {
        var rest = _rest;
        var set = _set;
        if (set) {
          var tl = set[1];
          if (List.hd(rest) === set[0]) {
            if (rest) {
              if (rest[1]) {
                _rest = List.tl(rest);
                _set = tl;
                continue ;
              } else {
                return true;
              }
            } else {
              _rest = List.tl(rest);
              _set = tl;
              continue ;
            }
          } else {
            _rest = sub;
            _set = tl;
            continue ;
          }
        } else {
          return false;
        }
      };
    };
    if (set) {
      var tl = set[1];
      var hd = set[0];
      if (List.length(hd) < List.length(f)) {
        _set = tl;
        continue ;
      } else if (find(hd, f, f)) {
        _set = tl;
        _n = n + 1.0;
        continue ;
      } else {
        _set = tl;
        continue ;
      }
    } else {
      return n;
    }
  };
}

function allCombinations(board) {
  var horizontals = transpose(board);
  return List.append(List.append(board, horizontals), diagonals(board));
}

function nextState(s, m) {
  var addToColumn = function (col, ins) {
    if (col) {
      var tl = col[1];
      if (tl) {
        if (List.hd(tl) === 0) {
          return /* :: */[
                  col[0],
                  addToColumn(/* :: */[
                        List.hd(tl),
                        List.tl(tl)
                      ], ins)
                ];
        } else {
          return /* :: */[
                  ins,
                  tl
                ];
        }
      } else {
        return /* :: */[
                ins,
                /* [] */0
              ];
      }
    } else {
      return Pervasives.failwith("Move is not legal.");
    }
  };
  var match = s[0];
  if (typeof match === "number" || !match.tag) {
    return Pervasives.failwith("Move is not legal.");
  } else if (match[0]) {
    var n = m[0];
    var newBoard = List.mapi((function (i, col) {
            if (i === CS17SetupGame$Game.$neg(n, 1)) {
              return addToColumn(col, 2);
            } else {
              return col;
            }
          }), s[1]);
    if (check(0.0, allCombinations(newBoard), /* :: */[
            2,
            /* :: */[
              2,
              /* :: */[
                2,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ]
            ]
          ]) > 0.0) {
      return /* State */[
              /* Win */Block.__(0, [/* P2 */1]),
              newBoard
            ];
    } else if (check(0.0, allCombinations(newBoard), /* :: */[
            0,
            /* [] */0
          ]) === 0.0) {
      return /* State */[
              /* Draw */0,
              newBoard
            ];
    } else {
      return /* State */[
              /* Ongoing */Block.__(1, [/* P1 */0]),
              newBoard
            ];
    }
  } else {
    var n$1 = m[0];
    var newBoard$1 = List.mapi((function (i, col) {
            if (i === CS17SetupGame$Game.$neg(n$1, 1)) {
              return addToColumn(col, 1);
            } else {
              return col;
            }
          }), s[1]);
    if (check(0.0, allCombinations(newBoard$1), /* :: */[
            1,
            /* :: */[
              1,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ]
            ]
          ]) > 0.0) {
      return /* State */[
              /* Win */Block.__(0, [/* P1 */0]),
              newBoard$1
            ];
    } else if (check(0.0, allCombinations(newBoard$1), /* :: */[
            0,
            /* [] */0
          ]) === 0.0) {
      return /* State */[
              /* Draw */0,
              newBoard$1
            ];
    } else {
      return /* State */[
              /* Ongoing */Block.__(1, [/* P2 */1]),
              newBoard$1
            ];
    }
  }
}

function moveOfString(s) {
  var tmp;
  try {
    tmp = Caml_format.caml_int_of_string(s);
  }
  catch (exn){
    tmp = Pervasives.failwith("Move must be represented by an integer.");
  }
  return /* Move */[tmp];
}

function estimateValue(s) {
  var match = s[0];
  if (typeof match === "number") {
    return 0.0;
  } else if (match.tag) {
    var combos = allCombinations(s[1]);
    return check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    0,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  0,
                  /* :: */[
                    1,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    1,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    0,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  0,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 + check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 + check(0.0, combos, /* :: */[
                1,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    2,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  2,
                  /* :: */[
                    2,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 250.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  2,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    2,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 100.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 - check(0.0, combos, /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0 - check(0.0, combos, /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]) * 25.0;
  } else if (match[0]) {
    return Number.NEGATIVE_INFINITY;
  } else {
    return Number.POSITIVE_INFINITY;
  }
}

var Connect4 = /* module */[
  /* initialRows */5,
  /* initialCols */7,
  /* names */"Jessie and Catey",
  /* stringOfPlayer */stringOfPlayer,
  /* stringOfPiece */stringOfPiece,
  /* transpose */transpose,
  /* stringOfState */stringOfState,
  /* stringOfMove */stringOfMove,
  /* fill */fill,
  /* initialState */initialState,
  /* legalMoves */legalMoves,
  /* gameStatus */gameStatus,
  /* diagonals */diagonals,
  /* check */check,
  /* allCombinations */allCombinations,
  /* nextState */nextState,
  /* moveOfString */moveOfString,
  /* estimateValue */estimateValue
];

CS17SetupGame$Game.checkExpect("Player 1", "Player 1", "stringOfPlayer test1");

CS17SetupGame$Game.checkExpect("Player 2", "Player 2", "stringOfPlayer test2");

CS17SetupGame$Game.checkExpect(stringOfPiece(1), "\x1b[36m1\x1b[0m", "stringOfPiece test1");

CS17SetupGame$Game.checkExpect(stringOfPiece(2), "\x1b[91m2\x1b[0m", "stringOfPiece test2");

CS17SetupGame$Game.checkExpect(stringOfPiece(0), "0", "stringOfPiece test3");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              3,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          2,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          3,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* [] */0
      ]
    ], "transpose test1");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              1,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              1,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          1,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          1,
          /* :: */[
            1,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              1,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              1,
              /* :: */[
                1,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ], "transpose test2");

CS17SetupGame$Game.checkError((function (param) {
        return Pervasives.failwith("A board cannot be empty.");
      }), "A board cannot be empty.");

CS17SetupGame$Game.checkError((function (param) {
        return transpose(/* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]);
      }), "A board cannot be 0-dimensional.");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              0,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                0,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]), "0 0 \n", "stringOfState test1");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                0,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), "0 \n0 \n", "stringOfState test2");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */[
          /* Draw */0,
          /* :: */[
            /* :: */[
              1,
              /* [] */0
            ],
            /* [] */0
          ]
        ]), "\x1b[36m1\x1b[0m \n", "stringOfState test3");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Move */[1]), "Column 1", "stringOfMove test1");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Move */[7]), "Column 7", "stringOfMove test2");

CS17SetupGame$Game.checkExpect(fill(0, 3), /* :: */[
      0,
      /* :: */[
        0,
        /* :: */[
          0,
          /* [] */0
        ]
      ]
    ], "fill test1");

CS17SetupGame$Game.checkExpect(fill(/* :: */[
          0,
          /* :: */[
            0,
            /* [] */0
          ]
        ], 3), /* :: */[
      /* :: */[
        0,
        /* :: */[
          0,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            0,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            0,
            /* :: */[
              0,
              /* [] */0
            ]
          ],
          /* [] */0
        ]
      ]
    ], "fill test2");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                2,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* [] */0
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]), /* :: */[
      /* Move */[1],
      /* :: */[
        /* Move */[3],
        /* [] */0
      ]
    ], "legalMoves test 1");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */[
          /* Win */Block.__(0, [/* P1 */0]),
          /* :: */[
            /* :: */[
              1,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  2,
                  /* :: */[
                    2,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* [] */0, "legalMoves test2");

CS17SetupGame$Game.checkExpect(/* Win */Block.__(0, [/* P1 */0]), /* Win */Block.__(0, [/* P1 */0]), "gameStatus test1");

CS17SetupGame$Game.checkExpect(/* Win */Block.__(0, [/* P2 */1]), /* Win */Block.__(0, [/* P2 */1]), "gameStatus test2");

CS17SetupGame$Game.checkExpect(/* Draw */0, /* Draw */0, "gameStatus test3");

CS17SetupGame$Game.checkExpect(/* Ongoing */Block.__(1, [/* P2 */1]), /* Ongoing */Block.__(1, [/* P2 */1]), "gameStatus test4");

CS17SetupGame$Game.checkExpect(/* Ongoing */Block.__(1, [/* P1 */0]), /* Ongoing */Block.__(1, [/* P1 */0]), "gameStatus test5");

CS17SetupGame$Game.checkExpect(diagonals(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* [] */0
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              5,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              6,
              /* :: */[
                8,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  7,
                  /* [] */0
                ],
                /* :: */[
                  /* :: */[
                    8,
                    /* :: */[
                      4,
                      /* [] */0
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      9,
                      /* :: */[
                        5,
                        /* :: */[
                          1,
                          /* [] */0
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        6,
                        /* :: */[
                          2,
                          /* [] */0
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          3,
                          /* [] */0
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "diagonals test1");

CS17SetupGame$Game.checkExpect(diagonals(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            3,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            4,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              3,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                4,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ], "diagonals test2");

CS17SetupGame$Game.checkExpect(check(0.0, /* :: */[
          /* :: */[
            0,
            /* :: */[
              1,
              /* :: */[
                1,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ], /* :: */[
          2,
          /* :: */[
            1,
            /* [] */0
          ]
        ]), 0.0, "check test1");

CS17SetupGame$Game.checkExpect(check(0.0, /* :: */[
          /* :: */[
            0,
            /* :: */[
              1,
              /* :: */[
                1,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ], /* :: */[
          0,
          /* :: */[
            1,
            /* [] */0
          ]
        ]), 2.0, "check test2");

CS17SetupGame$Game.checkExpect(allCombinations(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          2,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          3,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              3,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                1,
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    4,
                    /* [] */0
                  ],
                  /* :: */[
                    /* :: */[
                      3,
                      /* [] */0
                    ],
                    /* :: */[
                      /* :: */[
                        4,
                        /* :: */[
                          1,
                          /* [] */0
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          2,
                          /* [] */0
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "allCombinations test1");

CS17SetupGame$Game.checkExpect(allCombinations(/* :: */[
          /* :: */[
            0,
            /* :: */[
              1,
              /* [] */0
            ]
          ],
          /* [] */0
        ]), /* :: */[
      /* :: */[
        0,
        /* :: */[
          1,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            1,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              0,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                1,
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  0,
                  /* [] */0
                ],
                /* :: */[
                  /* :: */[
                    1,
                    /* [] */0
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], "allCombinations test2");

var testBoard = /* :: */[
  /* :: */[
    0,
    /* :: */[
      1,
      /* :: */[
        1,
        /* :: */[
          1,
          /* [] */0
        ]
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      0,
      /* :: */[
        2,
        /* :: */[
          2,
          /* :: */[
            2,
            /* [] */0
          ]
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        0,
        /* :: */[
          0,
          /* :: */[
            0,
            /* :: */[
              0,
              /* [] */0
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            0,
            /* :: */[
              0,
              /* :: */[
                0,
                /* [] */0
              ]
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ]
];

CS17SetupGame$Game.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  0,
                  /* :: */[
                    2,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* Move */[2]), /* State */[
      /* Ongoing */Block.__(1, [/* P2 */1]),
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              1,
              /* :: */[
                1,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                2,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ], "nextState test 1");

CS17SetupGame$Game.checkExpect(nextState(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          testBoard
        ], /* Move */[1]), /* State */[
      /* Win */Block.__(0, [/* P1 */0]),
      /* :: */[
        /* :: */[
          1,
          /* :: */[
            1,
            /* :: */[
              1,
              /* :: */[
                1,
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            0,
            /* :: */[
              2,
              /* :: */[
                2,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "nextState test 2");

CS17SetupGame$Game.checkError((function (param) {
        return nextState(/* State */[
                    /* Draw */0,
                    /* :: */[
                      /* :: */[
                        1,
                        /* [] */0
                      ],
                      /* [] */0
                    ]
                  ], /* Move */[1]);
      }), "Move is not legal.");

CS17SetupGame$Game.checkExpect(moveOfString("1"), /* Move */[1], "moveOfString test1");

CS17SetupGame$Game.checkExpect(moveOfString("0"), /* Move */[0], "moveOfString test2");

CS17SetupGame$Game.checkError((function (param) {
        return moveOfString("a");
      }), "Move must be represented by an integer.");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */[
          /* Win */Block.__(0, [/* P1 */0]),
          /* :: */[
            /* :: */[
              1,
              /* :: */[
                1,
                /* :: */[
                  1,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]), Number.POSITIVE_INFINITY, "estimateValue test1");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */[
          /* Win */Block.__(0, [/* P2 */1]),
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                2,
                /* :: */[
                  2,
                  /* :: */[
                    2,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]), Number.NEGATIVE_INFINITY, "estimateValue test2");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */[
          /* Draw */0,
          /* :: */[
            /* :: */[
              1,
              /* [] */0
            ],
            /* [] */0
          ]
        ]), 0.0, "estimateValue test3");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */[
          /* Ongoing */Block.__(1, [/* P2 */1]),
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]), 25.0, "estimateValue test4");

CS17SetupGame$Game.checkExpect(estimateValue(/* State */[
          /* Ongoing */Block.__(1, [/* P1 */0]),
          /* :: */[
            /* :: */[
              0,
              /* :: */[
                2,
                /* :: */[
                  0,
                  /* :: */[
                    0,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* [] */0
          ]
        ]), -25.0, "estimateValue test5");

var MyGame = [
  stringOfPlayer,
  stringOfState,
  stringOfMove,
  initialState,
  legalMoves,
  gameStatus,
  nextState,
  moveOfString,
  estimateValue
];

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
exports.testBoard = testBoard;
/* initialState Not a pure module */
