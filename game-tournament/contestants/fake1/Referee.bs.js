// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var AIPlayer$Game1 = require("./AIPlayer.bs.js");
var Connect4$Game1 = require("./Connect4.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Referee(MyGame) {
  return (function (Player1) {
      return (function (Player2) {
          var playGame = function (param) {
            try {
              var _s = MyGame.initialState;
              while(true) {
                var s = _s;
                console.log(Curry._1(MyGame.stringOfState, s));
                var match = Curry._1(MyGame.gameStatus, s);
                if (typeof match === "number") {
                  console.log("Draw...");
                  return /* () */0;
                } else if (match.tag) {
                  var player = match[0];
                  console.log(Curry._1(MyGame.stringOfPlayer, player) + "'s turn.\n");
                  var theMove = player ? Curry._1(Player2.nextMove, s) : Curry._1(Player1.nextMove, s);
                  console.log(Curry._1(MyGame.stringOfPlayer, player) + (" makes the move " + Curry._1(MyGame.stringOfMove, theMove)));
                  _s = Curry._2(MyGame.nextState, s, theMove);
                  continue ;
                } else {
                  console.log(Curry._1(MyGame.stringOfPlayer, match[0]) + " wins!");
                  return /* () */0;
                }
              };
            }
            catch (raw_exn){
              var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
              if (exn[0] === Caml_builtin_exceptions.failure) {
                console.log(exn[1]);
                return /* () */0;
              } else {
                throw exn;
              }
            }
          };
          return {
                  CurrentGame: MyGame,
                  playGame: playGame
                };
        });
    });
}

var MyGame_stringOfPlayer = Connect4$Game1.Connect4.stringOfPlayer;

var MyGame_stringOfState = Connect4$Game1.Connect4.stringOfState;

var MyGame_stringOfMove = Connect4$Game1.Connect4.stringOfMove;

var MyGame_initialState = Connect4$Game1.Connect4.initialState;

var MyGame_legalMoves = Connect4$Game1.Connect4.legalMoves;

var MyGame_gameStatus = Connect4$Game1.Connect4.gameStatus;

var MyGame_nextState = Connect4$Game1.Connect4.nextState;

var MyGame_moveOfString = Connect4$Game1.Connect4.moveOfString;

var MyGame_estimateValue = Connect4$Game1.Connect4.estimateValue;

var MyGame = {
  stringOfPlayer: MyGame_stringOfPlayer,
  stringOfState: MyGame_stringOfState,
  stringOfMove: MyGame_stringOfMove,
  initialState: MyGame_initialState,
  legalMoves: MyGame_legalMoves,
  gameStatus: MyGame_gameStatus,
  nextState: MyGame_nextState,
  moveOfString: MyGame_moveOfString,
  estimateValue: MyGame_estimateValue
};

var R1 = (function (Player1) {
        return (function (Player2) {
            var playGame = function (param) {
              try {
                var _s = MyGame_initialState;
                while(true) {
                  var s = _s;
                  console.log(Curry._1(MyGame_stringOfState, s));
                  var match = Curry._1(MyGame_gameStatus, s);
                  if (typeof match === "number") {
                    console.log("Draw...");
                    return /* () */0;
                  } else if (match.tag) {
                    var player = match[0];
                    console.log(Curry._1(MyGame_stringOfPlayer, player) + "'s turn.\n");
                    var theMove = player ? Curry._1(Player2.nextMove, s) : Curry._1(Player1.nextMove, s);
                    console.log(Curry._1(MyGame_stringOfPlayer, player) + (" makes the move " + Curry._1(MyGame_stringOfMove, theMove)));
                    _s = Curry._2(MyGame_nextState, s, theMove);
                    continue ;
                  } else {
                    console.log(Curry._1(MyGame_stringOfPlayer, match[0]) + " wins!");
                    return /* () */0;
                  }
                };
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn[0] === Caml_builtin_exceptions.failure) {
                  console.log(exn[1]);
                  return /* () */0;
                } else {
                  throw exn;
                }
              }
            };
            return {
                    CurrentGame: MyGame,
                    playGame: playGame
                  };
          });
      })(AIPlayer$Game1.AIPlayer({
            stringOfPlayer: Connect4$Game1.Connect4.stringOfPlayer,
            stringOfState: Connect4$Game1.Connect4.stringOfState,
            stringOfMove: Connect4$Game1.Connect4.stringOfMove,
            initialState: Connect4$Game1.Connect4.initialState,
            legalMoves: Connect4$Game1.Connect4.legalMoves,
            gameStatus: Connect4$Game1.Connect4.gameStatus,
            nextState: Connect4$Game1.Connect4.nextState,
            moveOfString: Connect4$Game1.Connect4.moveOfString,
            estimateValue: Connect4$Game1.Connect4.estimateValue
          }))(AIPlayer$Game1.AIPlayer({
          stringOfPlayer: Connect4$Game1.Connect4.stringOfPlayer,
          stringOfState: Connect4$Game1.Connect4.stringOfState,
          stringOfMove: Connect4$Game1.Connect4.stringOfMove,
          initialState: Connect4$Game1.Connect4.initialState,
          legalMoves: Connect4$Game1.Connect4.legalMoves,
          gameStatus: Connect4$Game1.Connect4.gameStatus,
          nextState: Connect4$Game1.Connect4.nextState,
          moveOfString: Connect4$Game1.Connect4.moveOfString,
          estimateValue: Connect4$Game1.Connect4.estimateValue
        }));

Curry._1(R1.playGame, /* () */0);

exports.Referee = Referee;
exports.R1 = R1;
/* R1 Not a pure module */
