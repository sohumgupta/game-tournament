// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$Game1 = require("./Connect4.bs.js");

function HumanPlayer(MyGame) {
  var getInputJSLine = (
      function() {
        const readlineSync = require('readline-sync');
        const rl = readlineSync;
        var ans = rl.question('What move do you want to make? ');
        return ans;
    });
  var nextMove = function (s) {
    var myMove = List.nth(Curry._1(MyGame.legalMoves, s), 0);
    var input = Curry._1(getInputJSLine, /* () */0);
    if (input === "exit") {
      Pervasives.failwith("Exiting Game REPL");
    } else {
      var mov;
      try {
        mov = Curry._1(MyGame.moveOfString, input);
      }
      catch (exn){
        console.log("not a valid move");
        mov = nextMove(s);
      }
      if (List.mem(Curry._1(MyGame.moveOfString, input), Curry._1(MyGame.legalMoves, s))) {
        myMove = mov;
      } else {
        console.log("Illegal move.");
        myMove = nextMove(s);
      }
    }
    return myMove;
  };
  return {
          PlayerGame: MyGame,
          getInputJSLine: getInputJSLine,
          nextMove: nextMove
        };
}

var MyGame_stringOfPlayer = Connect4$Game1.Connect4.stringOfPlayer;

var MyGame_stringOfState = Connect4$Game1.Connect4.stringOfState;

var MyGame_stringOfMove = Connect4$Game1.Connect4.stringOfMove;

var MyGame_initialState = Connect4$Game1.Connect4.initialState;

var MyGame_legalMoves = Connect4$Game1.Connect4.legalMoves;

var MyGame_gameStatus = Connect4$Game1.Connect4.gameStatus;

var MyGame_nextState = Connect4$Game1.Connect4.nextState;

var MyGame_moveOfString = Connect4$Game1.Connect4.moveOfString;

var MyGame_estimateValue = Connect4$Game1.Connect4.estimateValue;

var MyGame = {
  stringOfPlayer: MyGame_stringOfPlayer,
  stringOfState: MyGame_stringOfState,
  stringOfMove: MyGame_stringOfMove,
  initialState: MyGame_initialState,
  legalMoves: MyGame_legalMoves,
  gameStatus: MyGame_gameStatus,
  nextState: MyGame_nextState,
  moveOfString: MyGame_moveOfString,
  estimateValue: MyGame_estimateValue
};

var getInputJSLine = (
      function() {
        const readlineSync = require('readline-sync');
        const rl = readlineSync;
        var ans = rl.question('What move do you want to make? ');
        return ans;
    });

function nextMove(s) {
  var myMove = List.nth(Curry._1(MyGame_legalMoves, s), 0);
  var input = Curry._1(getInputJSLine, /* () */0);
  if (input === "exit") {
    Pervasives.failwith("Exiting Game REPL");
  } else {
    var mov;
    try {
      mov = Curry._1(MyGame_moveOfString, input);
    }
    catch (exn){
      console.log("not a valid move");
      mov = nextMove(s);
    }
    if (List.mem(Curry._1(MyGame_moveOfString, input), Curry._1(MyGame_legalMoves, s))) {
      myMove = mov;
    } else {
      console.log("Illegal move.");
      myMove = nextMove(s);
    }
  }
  return myMove;
}

var TestHumanPlayer = {
  PlayerGame: MyGame,
  getInputJSLine: getInputJSLine,
  nextMove: nextMove
};

var TestGame = 0;

exports.HumanPlayer = HumanPlayer;
exports.TestGame = TestGame;
exports.TestHumanPlayer = TestHumanPlayer;
/* getInputJSLine Not a pure module */
