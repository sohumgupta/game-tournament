// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function transpose(matrix) {
  if (matrix) {
    var match = matrix[0];
    if (match) {
      if (match[1]) {
        return /* :: */[
                List.map(List.hd, matrix),
                transpose(List.map(List.tl, matrix))
              ];
      } else {
        return /* :: */[
                List.flatten(matrix),
                /* [] */0
              ];
      }
    } else {
      return Pervasives.failwith("tranpose: matrix invalid");
    }
  } else {
    return Pervasives.failwith("tranpose: matrix invalid");
  }
}

function vertFlip(matrix) {
  if (matrix) {
    return List.map(List.rev, matrix);
  } else {
    return Pervasives.failwith("vertFlip: matrix invalid");
  }
}

function stringOfPlayer(param) {
  if (param) {
    return "Player 2 (Yellow)";
  } else {
    return "Player 1 (Red)";
  }
}

function stringOfState(currState) {
  var rowString = function (rowStr) {
    return "| " + ($$String.concat(" ", List.map((function (x) {
                        if (x === 1) {
                          return "\x1b[31m" + (String(0) + "\x1b[0m");
                        } else if (x === 2) {
                          return "\x1b[33m" + (String(0) + "\x1b[0m");
                        } else {
                          return String(x);
                        }
                      }), rowStr)) + " |");
  };
  var complete = transpose(currState[1]);
  return $$String.concat("\n", List.map(rowString, complete));
}

function stringOfMove(param) {
  return String(param[0]);
}

function moveOfString(input) {
  return /* Move */[Caml_format.caml_int_of_string(input)];
}

function makeColumns(y) {
  if (y === 1) {
    return /* :: */[
            0,
            /* [] */0
          ];
  } else if (y > 1) {
    return /* :: */[
            0,
            makeColumns(CS17SetupGame$Game.$neg(y, 1))
          ];
  } else {
    return Pervasives.failwith("invalid row size");
  }
}

function makeRows(x, col) {
  if (x === 1) {
    return /* :: */[
            col,
            /* [] */0
          ];
  } else if (x > 1) {
    return /* :: */[
            col,
            makeRows(CS17SetupGame$Game.$neg(x, 1), col)
          ];
  } else {
    return Pervasives.failwith("invalid column size");
  }
}

var initialState_000 = /* Ongoing */Block.__(1, [/* P1 */0]);

var initialState_001 = makeRows(7, makeColumns(5));

var initialState = /* State */[
  initialState_000,
  initialState_001
];

function legalMoves(input) {
  var movesHelper = function (_st, _num) {
    while(true) {
      var num = _num;
      var st = _st;
      if (st) {
        var rest = st[1];
        if (List.hd(st[0]) === 0) {
          return /* :: */[
                  /* Move */[num],
                  movesHelper(rest, CS17SetupGame$Game.$plus(num, 1))
                ];
        } else {
          _num = CS17SetupGame$Game.$plus(num, 1);
          _st = rest;
          continue ;
        }
      } else {
        return /* [] */0;
      }
    };
  };
  return movesHelper(input[1], 1);
}

function gameStatus(param) {
  return param[0];
}

function zap(items, things, op) {
  if (items) {
    if (things) {
      return /* :: */[
              Curry._2(op, items[0], things[0]),
              zap(items[1], things[1], op)
            ];
    } else {
      return Pervasives.failwith("First list must be shorter!");
    }
  } else {
    return things;
  }
}

function makeLeftDiag(board) {
  if (board) {
    var tl = board[1];
    var col1 = board[0];
    if (tl) {
      return zap(col1, /* :: */[
                  /* [] */0,
                  makeLeftDiag(tl)
                ], (function (x, y) {
                    return /* :: */[
                            x,
                            y
                          ];
                  }));
    } else {
      return List.map((function (x) {
                    return /* :: */[
                            x,
                            /* [] */0
                          ];
                  }), col1);
    }
  } else {
    return Pervasives.failwith("Invalid board in make diagonals");
  }
}

function makeRightDiag(board) {
  return makeLeftDiag(vertFlip(board));
}

function nextState(oldState, playerMove) {
  var newBoard = function (st, moveNum) {
    var addPiece = function (player, column) {
      if (column) {
        var hd = column[0];
        var exit = 0;
        if (hd !== 0 || column[1]) {
          exit = 1;
        } else if (player === /* P1 */0) {
          return /* :: */[
                  1,
                  /* [] */0
                ];
        } else {
          return /* :: */[
                  2,
                  /* [] */0
                ];
        }
        if (exit === 1) {
          var tl = column[1];
          if (List.hd(tl) === 0) {
            return /* :: */[
                    hd,
                    addPiece(player, tl)
                  ];
          } else if (player === /* P1 */0) {
            return /* :: */[
                    1,
                    tl
                  ];
          } else {
            return /* :: */[
                    2,
                    tl
                  ];
          }
        }
        
      } else {
        return Pervasives.failwith("addpiece error");
      }
    };
    var match = st[0];
    if (typeof match === "number" || !match.tag) {
      return Pervasives.failwith("newboard error");
    } else {
      var match$1 = st[1];
      if (match$1) {
        var n = moveNum[0];
        var tl = match$1[1];
        var hd = match$1[0];
        var player = match[0];
        if (n !== 1) {
          return /* :: */[
                  hd,
                  newBoard(/* State */[
                        /* Ongoing */Block.__(1, [player]),
                        tl
                      ], /* Move */[CS17SetupGame$Game.$neg(n, 1)])
                ];
        } else {
          return /* :: */[
                  addPiece(player, hd),
                  tl
                ];
        }
      } else {
        return Pervasives.failwith("newboard error");
      }
    }
  };
  var checkWin = function (player, board, prevStat) {
    var fourConnect = function (_input, pl, _count) {
      while(true) {
        var count = _count;
        var input = _input;
        if (count !== 0) {
          if (input) {
            var tl = input[1];
            if (input[0] === pl) {
              _count = CS17SetupGame$Game.$neg(count, 1);
              _input = tl;
              continue ;
            } else {
              _count = 4;
              _input = tl;
              continue ;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
      };
    };
    var fourConnectList = function (_input, pl) {
      while(true) {
        var input = _input;
        if (input) {
          if (fourConnect(input[0], pl, 4)) {
            return true;
          } else {
            _input = input[1];
            continue ;
          }
        } else {
          return false;
        }
      };
    };
    var diagCheck = function (board, player) {
      if (fourConnectList(makeLeftDiag(vertFlip(board)), player)) {
        return true;
      } else {
        return fourConnectList(makeLeftDiag(board), player);
      }
    };
    if (player === /* P1 */0) {
      if (fourConnectList(board, 1) || fourConnectList(transpose(board), 1) || diagCheck(board, 1)) {
        return /* Win */Block.__(0, [/* P1 */0]);
      } else if (legalMoves(/* State */[
              prevStat,
              board
            ]) === /* [] */0) {
        return /* Draw */0;
      } else {
        return /* Ongoing */Block.__(1, [/* P2 */1]);
      }
    } else if (fourConnectList(board, 2) || fourConnectList(transpose(board), 2) || diagCheck(board, 2)) {
      return /* Win */Block.__(0, [/* P2 */1]);
    } else if (legalMoves(/* State */[
            prevStat,
            board
          ]) === /* [] */0) {
      return /* Draw */0;
    } else {
      return /* Ongoing */Block.__(1, [/* P1 */0]);
    }
  };
  var match = oldState[0];
  if (typeof match === "number") {
    return /* State */[
            /* Draw */0,
            oldState[1]
          ];
  } else if (match.tag) {
    var player = match[0];
    return /* State */[
            checkWin(player, newBoard(oldState, playerMove), /* Ongoing */Block.__(1, [player])),
            newBoard(oldState, playerMove)
          ];
  } else {
    return /* State */[
            /* Win */Block.__(0, [match[0]]),
            oldState[1]
          ];
  }
}

function estimateValue(input) {
  var vertEst = function (stat) {
    if (stat) {
      var vertEstHelper = function (_aloi, _zeroes) {
        while(true) {
          var zeroes = _zeroes;
          var aloi = _aloi;
          if (aloi) {
            switch (aloi[0]) {
              case 0 : 
                  var tl = aloi[1];
                  if (tl) {
                    _zeroes = CS17SetupGame$Game.$plus(zeroes, 1);
                    _aloi = tl;
                    continue ;
                  } else {
                    return 0.0;
                  }
              case 1 : 
                  var match = aloi[1];
                  if (match) {
                    if (match[0] !== 1) {
                      if (zeroes >= 3) {
                        return 2.0;
                      } else {
                        return 0.0;
                      }
                    } else {
                      var match$1 = match[1];
                      if (match$1) {
                        if (match$1[0] !== 1) {
                          if (zeroes >= 2) {
                            return 20.0;
                          } else {
                            return 0.0;
                          }
                        } else {
                          var match$2 = match$1[1];
                          if (match$2) {
                            if (match$2[0] !== 1) {
                              if (zeroes >= 1) {
                                return 150.0;
                              } else {
                                return 0.0;
                              }
                            } else {
                              return Number.POSITIVE_INFINITY;
                            }
                          } else if (zeroes >= 1) {
                            return 150.0;
                          } else {
                            return 0.0;
                          }
                        }
                      } else if (zeroes >= 2) {
                        return 20.0;
                      } else {
                        return 0.0;
                      }
                    }
                  } else if (zeroes >= 3) {
                    return 2.0;
                  } else {
                    return 0.0;
                  }
              case 2 : 
                  var match$3 = aloi[1];
                  if (match$3) {
                    if (match$3[0] !== 2) {
                      if (zeroes >= 3) {
                        return -2.0;
                      } else {
                        return 0.0;
                      }
                    } else {
                      var match$4 = match$3[1];
                      if (match$4) {
                        if (match$4[0] !== 2) {
                          if (zeroes >= 2) {
                            return -20.0;
                          } else {
                            return 0.0;
                          }
                        } else {
                          var match$5 = match$4[1];
                          if (match$5) {
                            if (match$5[0] !== 2) {
                              if (zeroes >= 1) {
                                return -150.0;
                              } else {
                                return 0.0;
                              }
                            } else {
                              return Number.NEGATIVE_INFINITY;
                            }
                          } else if (zeroes >= 1) {
                            return -150.0;
                          } else {
                            return 0.0;
                          }
                        }
                      } else if (zeroes >= 2) {
                        return -20.0;
                      } else {
                        return 0.0;
                      }
                    }
                  } else if (zeroes >= 3) {
                    return -2.0;
                  } else {
                    return 0.0;
                  }
              default:
                return 0.0;
            }
          } else {
            return 0.0;
          }
        };
      };
      return vertEstHelper(stat[0], 0) + vertEst(stat[1]);
    } else {
      return 0.0;
    }
  };
  var horDiagEst = function (stat) {
    if (stat) {
      var horDiagEstHelper = function (_aloi, _score) {
        while(true) {
          var score = _score;
          var aloi = _aloi;
          if (aloi) {
            var match = aloi[1];
            if (match) {
              var match$1 = match[1];
              if (match$1) {
                var match$2 = match$1[1];
                if (match$2) {
                  var rest = match$2[1];
                  var fourth = match$2[0];
                  var third = match$1[0];
                  var second = match[0];
                  var exit = 0;
                  switch (aloi[0]) {
                    case 0 : 
                        switch (second) {
                          case 0 : 
                              switch (third) {
                                case 0 : 
                                    exit = fourth !== 1 ? (
                                        fourth !== 2 ? 1 : 7
                                      ) : 4;
                                    break;
                                case 1 : 
                                    exit = fourth !== 0 ? (
                                        fourth !== 1 ? 1 : 3
                                      ) : 4;
                                    break;
                                case 2 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 7;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 6;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                default:
                                  exit = 1;
                              }
                              break;
                          case 1 : 
                              exit = third !== 0 ? (
                                  third !== 1 ? 1 : (
                                      fourth !== 0 ? (
                                          fourth !== 1 ? 1 : 2
                                        ) : 3
                                    )
                                ) : (
                                  fourth !== 0 ? (
                                      fourth !== 1 ? 1 : 3
                                    ) : 4
                                );
                              break;
                          case 2 : 
                              switch (third) {
                                case 0 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 7;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 6;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                case 1 : 
                                    exit = 1;
                                    break;
                                case 2 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 6;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 5;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                default:
                                  exit = 1;
                              }
                              break;
                          default:
                            exit = 1;
                        }
                        break;
                    case 1 : 
                        if (second !== 0) {
                          if (second !== 1) {
                            exit = 1;
                          } else if (third !== 0) {
                            if (third !== 1) {
                              exit = 1;
                            } else if (fourth !== 0) {
                              if (fourth !== 1) {
                                exit = 1;
                              } else {
                                return Number.POSITIVE_INFINITY;
                              }
                            } else {
                              exit = 2;
                            }
                          } else {
                            exit = fourth !== 0 ? (
                                fourth !== 1 ? 1 : 2
                              ) : 3;
                          }
                        } else {
                          exit = third !== 0 ? (
                              third !== 1 ? 1 : (
                                  fourth !== 0 ? (
                                      fourth !== 1 ? 1 : 2
                                    ) : 3
                                )
                            ) : (
                              fourth !== 0 ? (
                                  fourth !== 1 ? 1 : 3
                                ) : 4
                            );
                        }
                        break;
                    case 2 : 
                        switch (second) {
                          case 0 : 
                              switch (third) {
                                case 0 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 7;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 6;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                case 1 : 
                                    exit = 1;
                                    break;
                                case 2 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 6;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 5;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                default:
                                  exit = 1;
                              }
                              break;
                          case 1 : 
                              exit = 1;
                              break;
                          case 2 : 
                              switch (third) {
                                case 0 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 6;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          exit = 5;
                                          break;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                case 1 : 
                                    exit = 1;
                                    break;
                                case 2 : 
                                    switch (fourth) {
                                      case 0 : 
                                          exit = 5;
                                          break;
                                      case 1 : 
                                          exit = 1;
                                          break;
                                      case 2 : 
                                          return Number.NEGATIVE_INFINITY;
                                      default:
                                        exit = 1;
                                    }
                                    break;
                                default:
                                  exit = 1;
                              }
                              break;
                          default:
                            exit = 1;
                        }
                        break;
                    default:
                      exit = 1;
                  }
                  switch (exit) {
                    case 1 : 
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 2 : 
                        _score = 120.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 3 : 
                        _score = 15.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 4 : 
                        _score = 2.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 5 : 
                        _score = -120.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 6 : 
                        _score = -15.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    case 7 : 
                        _score = -2.0 + score;
                        _aloi = /* :: */[
                          second,
                          /* :: */[
                            third,
                            /* :: */[
                              fourth,
                              rest
                            ]
                          ]
                        ];
                        continue ;
                    
                  }
                } else {
                  return score;
                }
              } else {
                return score;
              }
            } else {
              return score;
            }
          } else {
            return score;
          }
        };
      };
      return horDiagEstHelper(stat[0], 0.0) + horDiagEst(stat[1]);
    } else {
      return 0.0;
    }
  };
  var board = input[1];
  return vertEst(board) + horDiagEst(transpose(board)) + horDiagEst(makeLeftDiag(vertFlip(board))) + horDiagEst(makeLeftDiag(board));
}

var Connect4 = /* module */[
  /* initialRows */5,
  /* initialCols */7,
  /* names */"wchen77 jlim37",
  /* transpose */transpose,
  /* vertFlip */vertFlip,
  /* stringOfPlayer */stringOfPlayer,
  /* stringOfState */stringOfState,
  /* stringOfMove */stringOfMove,
  /* moveOfString */moveOfString,
  /* initialState */initialState,
  /* legalMoves */legalMoves,
  /* gameStatus */gameStatus,
  /* zap */zap,
  /* makeLeftDiag */makeLeftDiag,
  /* makeRightDiag */makeRightDiag,
  /* nextState */nextState,
  /* estimateValue */estimateValue
];

CS17SetupGame$Game.checkExpect("Player 1 (Red)", "Player 1 (Red)", "stringOfPlayer player 1");

CS17SetupGame$Game.checkExpect("Player 2 (Yellow)", "Player 2 (Yellow)", "stringOfPlayer player 2");

CS17SetupGame$Game.checkExpect(String(1), "Checker dropped into column 1", "stringOfMove Move1");

CS17SetupGame$Game.checkExpect(String(5), "Checker dropped into column 5", "stringOfMove Move5");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* [] */0
          ],
          /* [] */0
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* [] */0
    ], "check 1by1  matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              2,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                3,
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  4,
                  /* [] */0
                ],
                /* :: */[
                  /* :: */[
                    5,
                    /* [] */0
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          2,
          /* :: */[
            3,
            /* :: */[
              4,
              /* :: */[
                5,
                /* [] */0
              ]
            ]
          ]
        ]
      ],
      /* [] */0
    ], "check one column matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* :: */[
                    5,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* [] */0
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            3,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              4,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                5,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "check one row matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          3,
          /* [] */0
        ]
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* [] */0
      ]
    ], "check 2by2 square matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* [] */0
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          4,
          /* :: */[
            7,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            5,
            /* :: */[
              8,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              6,
              /* :: */[
                9,
                /* [] */0
              ]
            ]
          ],
          /* [] */0
        ]
      ]
    ], "check 3by3 square matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  10,
                  /* :: */[
                    11,
                    /* :: */[
                      12,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          4,
          /* :: */[
            7,
            /* :: */[
              10,
              /* [] */0
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            5,
            /* :: */[
              8,
              /* :: */[
                11,
                /* [] */0
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              6,
              /* :: */[
                9,
                /* :: */[
                  12,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* [] */0
        ]
      ]
    ], "check tall rectangular matrix");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              5,
              /* :: */[
                6,
                /* :: */[
                  7,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* :: */[
                  10,
                  /* :: */[
                    11,
                    /* :: */[
                      12,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* :: */[
          5,
          /* :: */[
            9,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            6,
            /* :: */[
              10,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              7,
              /* :: */[
                11,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                8,
                /* :: */[
                  12,
                  /* [] */0
                ]
              ]
            ],
            /* [] */0
          ]
        ]
      ]
    ], "check long rectangular matrix");

CS17SetupGame$Game.checkExpect(zap(/* [] */0, /* :: */[
          2,
          /* :: */[
            3,
            /* [] */0
          ]
        ], CS17SetupGame$Game.$neg), /* :: */[
      2,
      /* :: */[
        3,
        /* [] */0
      ]
    ], "zap empty items list");

CS17SetupGame$Game.checkExpect(zap(/* [] */0, /* [] */0, CS17SetupGame$Game.$plus), /* [] */0, "zap empty things list");

CS17SetupGame$Game.checkExpect(zap(/* :: */[
          1,
          /* [] */0
        ], /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ], CS17SetupGame$Game.$plus), /* :: */[
      2,
      /* :: */[
        2,
        /* :: */[
          3,
          /* [] */0
        ]
      ]
    ], "zap one element items list");

CS17SetupGame$Game.checkExpect(zap(/* :: */[
          3,
          /* [] */0
        ], /* :: */[
          5,
          /* [] */0
        ], CS17SetupGame$Game.$star), /* :: */[
      15,
      /* [] */0
    ], "zap one element things list");

CS17SetupGame$Game.checkExpect(zap(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              4,
              /* [] */0
            ]
          ]
        ], /* :: */[
          3,
          /* :: */[
            4,
            /* :: */[
              6,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ]
        ], CS17SetupGame$Game.$plus), /* :: */[
      4,
      /* :: */[
        6,
        /* :: */[
          10,
          /* :: */[
            7,
            /* [] */0
          ]
        ]
      ]
    ], "zap multi element items list");

CS17SetupGame$Game.checkExpect(zap(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              4,
              /* :: */[
                6,
                /* [] */0
              ]
            ]
          ]
        ], /* :: */[
          3,
          /* :: */[
            4,
            /* :: */[
              6,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ]
        ], CS17SetupGame$Game.$plus), /* :: */[
      4,
      /* :: */[
        6,
        /* :: */[
          10,
          /* :: */[
            13,
            /* [] */0
          ]
        ]
      ]
    ], "zap lists of equal length");

CS17SetupGame$Game.checkError((function (param) {
        return zap(/* :: */[
                    1,
                    /* :: */[
                      2,
                      /* :: */[
                        4,
                        /* :: */[
                          6,
                          /* [] */0
                        ]
                      ]
                    ]
                  ], /* :: */[
                    3,
                    /* :: */[
                      4,
                      /* :: */[
                        6,
                        /* [] */0
                      ]
                    ]
                  ], CS17SetupGame$Game.$neg);
      }), "First list must be shorter!");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                3,
                /* :: */[
                  2,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  6,
                  /* :: */[
                    5,
                    /* :: */[
                      4,
                      /* [] */0
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    9,
                    /* :: */[
                      8,
                      /* :: */[
                        7,
                        /* [] */0
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ])), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              5,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              6,
              /* :: */[
                8,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "3x3 rightdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                3,
                /* :: */[
                  2,
                  /* :: */[
                    1,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  6,
                  /* :: */[
                    5,
                    /* :: */[
                      4,
                      /* [] */0
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    9,
                    /* :: */[
                      8,
                      /* :: */[
                        7,
                        /* [] */0
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      12,
                      /* :: */[
                        11,
                        /* :: */[
                          10,
                          /* [] */0
                        ]
                      ]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ])), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              5,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              6,
              /* :: */[
                8,
                /* :: */[
                  10,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* :: */[
                  11,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  12,
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ], "4x3 rightdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                4,
                /* :: */[
                  3,
                  /* :: */[
                    2,
                    /* :: */[
                      1,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  8,
                  /* :: */[
                    7,
                    /* :: */[
                      6,
                      /* :: */[
                        5,
                        /* [] */0
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    12,
                    /* :: */[
                      11,
                      /* :: */[
                        10,
                        /* :: */[
                          9,
                          /* [] */0
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ])), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            5,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              6,
              /* :: */[
                9,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                7,
                /* :: */[
                  10,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                8,
                /* :: */[
                  11,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  12,
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ], "3x4 rightdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                2,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  4,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ],
                /* [] */0
              ]
            ])), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            3,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            4,
            /* [] */0
          ],
          /* [] */0
        ]
      ]
    ], "2x2 rightdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                2,
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  4,
                  /* [] */0
                ],
                /* [] */0
              ]
            ])), /* :: */[
      /* :: */[
        2,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          4,
          /* [] */0
        ],
        /* [] */0
      ]
    ], "2x1 rightdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(vertFlip(/* :: */[
              /* :: */[
                5,
                /* :: */[
                  4,
                  /* :: */[
                    3,
                    /* :: */[
                      2,
                      /* :: */[
                        1,
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* [] */0
            ])), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            3,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              4,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                5,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "1x5 rightdiag");

CS17SetupGame$Game.checkError((function (param) {
        return makeLeftDiag(Pervasives.failwith("vertFlip: matrix invalid"));
      }), "vertFlip: matrix invalid");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* [] */0
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              5,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              6,
              /* :: */[
                8,
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "3x3 leftdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                5,
                /* :: */[
                  6,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                7,
                /* :: */[
                  8,
                  /* :: */[
                    9,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  10,
                  /* :: */[
                    11,
                    /* :: */[
                      12,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            4,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              5,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              6,
              /* :: */[
                8,
                /* :: */[
                  10,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* :: */[
                  11,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  12,
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ], "4x3 leftdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* [] */0
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              5,
              /* :: */[
                6,
                /* :: */[
                  7,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                9,
                /* :: */[
                  10,
                  /* :: */[
                    11,
                    /* :: */[
                      12,
                      /* [] */0
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            5,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            3,
            /* :: */[
              6,
              /* :: */[
                9,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              4,
              /* :: */[
                7,
                /* :: */[
                  10,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                8,
                /* :: */[
                  11,
                  /* [] */0
                ]
              ],
              /* :: */[
                /* :: */[
                  12,
                  /* [] */0
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ], "3x4 leftdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ],
          /* :: */[
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* :: */[
            3,
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            4,
            /* [] */0
          ],
          /* [] */0
        ]
      ]
    ], "2x2 leftdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            2,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              4,
              /* [] */0
            ],
            /* [] */0
          ]
        ]), /* :: */[
      /* :: */[
        2,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          4,
          /* [] */0
        ],
        /* [] */0
      ]
    ], "2x1 leftdiag");

CS17SetupGame$Game.checkExpect(makeLeftDiag(/* :: */[
          /* :: */[
            1,
            /* :: */[
              2,
              /* :: */[
                3,
                /* :: */[
                  4,
                  /* :: */[
                    5,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* [] */0
        ]), /* :: */[
      /* :: */[
        1,
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          2,
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            3,
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              4,
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                5,
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "1x5 leftdiag");

CS17SetupGame$Game.checkError((function (param) {
        return Pervasives.failwith("Invalid board in make diagonals");
      }), "Invalid board in make diagonals");

CS17SetupGame$Game.checkExpect(/* Move */[Caml_format.caml_int_of_string("1")], /* Move */[1], "moveOfString Column 1");

CS17SetupGame$Game.checkExpect(/* Move */[Caml_format.caml_int_of_string("4")], /* Move */[4], "moveOfString Column 4");

CS17SetupGame$Game.checkExpect(/* Move */[Caml_format.caml_int_of_string("6")], /* Move */[6], "moveOfString Column 6");

var MyGame = [
  stringOfPlayer,
  stringOfState,
  stringOfMove,
  initialState,
  legalMoves,
  gameStatus,
  nextState,
  moveOfString,
  estimateValue
];

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/* initialState Not a pure module */
